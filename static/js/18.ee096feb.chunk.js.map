{"version":3,"sources":["component/Game/TrainingWithYourself.js"],"names":["Transition","React","forwardRef","props","ref","direction","TrainingWithYourself","state","openDialog","showBoard","setupBoardCheck","dataBoardTrainingWithYourself","chessmanWin","setupBoard","sizeChessBoard","iconChessmanA","iconChessmanB","firstTurn","CHESSMAN_YOURSELF_A","menuSelectChessmanAIcon","menuSelectChessmanBIcon","checkShowChessman","setupChessmanDone","getDataBoardCurrent","bind","handleDisagree","handleAgree","checkWinChessman","handleSetupBoardChange","createNewChessBoard","openMenuSelectChessmanAIcon","closeMenuSelectChessmanAIcon","openMenuSelectChessmanBIcon","closeMenuSelectChessmanBIcon","event","this","setState","currentTarget","dataUserAuth","showDataChessmans","chessmanUserId","uid","prevProps","prevState","snapshot","dataChessmans","Array","isArray","length","saveDataBoardTrainingWithYourself","dataBoard","name","value","chessmanId","classes","Fragment","className","trainingWithYourselfWrapper","trainingHeader","i18n","t","setupBoardWrapper","sizeInput","type","onChange","target","inputProps","min","max","selectChessman","aria-controls","btnChessman","aria-haspopup","onClick","iconChessman","src","chessmanUrl","alt","style","width","height","notChessman","id","anchorEl","keepMounted","open","onClose","map","item","index","btnSetupBoard","size","chessmanA","chessmanB","CHESSMAN_YOURSELF_B","dataBoardTrainingDefault","dialogProps","messageProps","content","color","disagreeButtonProps","background","agreeButtonProps","dialogNotice","PaperProps","backgroundColor","boxShadow","fullScreen","TransitionComponent","winNoticeWrapper","NoiceWinIcon","noticeWin","btnNewChessBoard","Component","compose","connect","authReducer","gameReducer","dispatch","dataTraining","gameActions","withStyles","theme","display","alignItems","justifyContent","flexDirection","overflowY","borderRadius","margin","padding","fontSize","fontWeight","paddingLeft","textAlign","textTransform","marginTop","border","withTranslation"],"mappings":"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","file":"static/js/18.ee096feb.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport {compose} from \"redux\";\nimport Footer from \"../Footer\";\nimport Header from \"../Header\";\nimport AuthBlock from \"../Auth/Auth\";\nimport Content from \"../Content\";\nimport Board from \"./Board\";\nimport {CHESSMAN_AI_ID, CHESSMAN_YOURSELF_A, CHESSMAN_YOURSELF_B} from \"../../constants/constants\";\nimport * as gameActions from \"../../_actions/game\";\nimport DialogForm from \"../../theme/DialogForm\";\nimport i18n from \"../../i18n\";\nimport Button from \"@material-ui/core/Button\";\nimport AppInput from \"../../theme/AppInput\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport NoiceWinIcon from \"../../images/notice_win.png\";\nimport Slide from \"@material-ui/core/Slide\";\nimport {withTranslation} from \"react-i18next\";\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nconst styles = theme => ({\n    trainingWithYourselfWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        height: '100%',\n        flexDirection: 'column',\n        overflowY: 'scroll',\n        backgroundColor: '#e0ece4',\n        borderRadius: 9,\n        margin: '0.5rem 1rem',\n        '&::-webkit-scrollbar': {\n            width: 9,\n            height: 9,\n        },\n        '&::-webkit-scrollbar-track': {\n            // background: '#ee6f57',\n            // borderRadius: 9,\n        },\n        '&::-webkit-scrollbar-thumb': {\n            borderRadius: 9,\n            background: '#ee6f57',\n        },\n    },\n    noticeWin: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '0.5rem',\n        '& img': {\n            width: 48,\n            height: 48,\n            borderRadius: 11\n        },\n        '& .text': {\n            color: '#81b214',\n            fontSize: '0.9rem',\n            fontWeight: 600,\n            paddingLeft: '0.5rem'\n        }\n    },\n    trainingHeader: {\n        color: '#123152',\n        width: '100%',\n        fontSize: '1.2rem',\n        textAlign: 'center',\n        fontWeight: 700,\n        padding: '1rem 0rem'\n    },\n    btnNewChessBoard: {\n        backgroundColor: '#123152',\n        textTransform: 'initial',\n        padding: '0.5rem 1.5rem',\n        fontWeight: 600,\n        borderRadius: 9,\n        margin: '0.5rem 0rem',\n        color: '#fff',\n        '&:hover': {\n            backgroundColor: '#123152',\n        }\n    },\n    sizeInput: {\n        width: '100%',\n    },\n    setupBoardWrapper: {\n\n    },\n    btnSetupBoard: {\n        backgroundColor: '#123152',\n        textTransform: 'initial',\n        padding: '0.5rem 1.5rem',\n        fontWeight: 600,\n        borderRadius: 9,\n        marginTop: '1rem',\n        color: '#fff',\n        width: '100%',\n        '&:hover': {\n            backgroundColor: '#123152',\n        }\n    },\n    selectChessman: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        '& .title': {\n            color: '#123152',\n            width: '100%',\n            padding: '0.5rem 0rem',\n            fontSize: '0.9rem',\n            fontWeight: 600,\n\n        }\n    },\n    notChessman: {\n        color: '#ffdead',\n    },\n    btnChessman: {\n        backgroundColor: '#123152',\n        textTransform: 'initial',\n        padding: '0.5rem 1.5rem',\n        fontWeight: 600,\n        borderRadius: 9,\n        marginTop: '0.25rem',\n        width: '100%',\n        '&:hover': {\n            backgroundColor: '#123152',\n        }\n    },\n    iconChessman: {\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        '& img': {\n            width: 48,\n            height: 48,\n            border: '1px solid #fff',\n            borderRadius: 9,\n        },\n        '& span': {\n            fontWeight: 600,\n            paddingLeft: '0.5rem',\n            color: '#ffdead',\n        }\n    },\n    dialogNotice: {\n        backgroundColor: 'rgb(251, 236, 236, 0.3)',\n    },\n    winNoticeWrapper: {\n        backgroundColor: 'rgb(251, 236, 236, 0.3)',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n    },\n});\nclass TrainingWithYourself extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            openDialog: false,\n            showBoard: false,\n            setupBoardCheck: false,\n            dataBoardTrainingWithYourself: null,\n            chessmanWin: null,\n            setupBoard: {\n                sizeChessBoard: 10,\n                iconChessmanA: null,\n                iconChessmanB: null,\n                firstTurn: CHESSMAN_YOURSELF_A,\n            },\n            menuSelectChessmanAIcon: null,\n            menuSelectChessmanBIcon: null,\n            checkShowChessman: false,\n            setupChessmanDone: false\n        };\n\n        this.getDataBoardCurrent = this.getDataBoardCurrent.bind(this);\n        this.handleDisagree = this.handleDisagree.bind(this);\n        this.handleAgree = this.handleAgree.bind(this);\n        this.checkWinChessman = this.checkWinChessman.bind(this);\n        this.handleSetupBoardChange = this.handleSetupBoardChange.bind(this);\n        this.setupBoard = this.setupBoard.bind(this);\n        this.createNewChessBoard = this.createNewChessBoard.bind(this);\n\n        this.openMenuSelectChessmanAIcon = this.openMenuSelectChessmanAIcon.bind(this);\n        this.closeMenuSelectChessmanAIcon = this.closeMenuSelectChessmanAIcon.bind(this);\n        this.openMenuSelectChessmanBIcon = this.openMenuSelectChessmanBIcon.bind(this);\n        this.closeMenuSelectChessmanBIcon = this.closeMenuSelectChessmanBIcon.bind(this);\n\n    }\n\n    openMenuSelectChessmanAIcon(event) {\n        this.setState({\n            menuSelectChessmanAIcon: event.currentTarget\n        });\n    }\n    closeMenuSelectChessmanAIcon() {\n        this.setState({\n            menuSelectChessmanAIcon: null\n        });\n    }\n    openMenuSelectChessmanBIcon(event) {\n        this.setState({\n            menuSelectChessmanBIcon: event.currentTarget\n        });\n    }\n    closeMenuSelectChessmanBIcon() {\n        this.setState({\n            menuSelectChessmanBIcon: null\n        });\n    }\n\n    componentDidMount() {\n        const {\n            dataBoardTrainingWithYourself,\n            dataUserAuth\n        } = this.props;\n        this.props.showDataChessmans();\n        if (dataBoardTrainingWithYourself && (dataBoardTrainingWithYourself.chessmanUserId === (dataUserAuth ? dataUserAuth.uid : null))) {\n            this.setState({\n                openDialog: true\n            });\n        } else {\n            this.setState({\n                setupBoardCheck: true\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {\n            dataChessmans,\n            dataBoardTrainingWithYourself\n        } = this.props;\n        const {\n            setupBoard,\n            checkShowChessman,\n            chessmanWin\n        } = this.state;\n        if (dataChessmans && Array.isArray(dataChessmans) && dataChessmans.length >= 2 && !checkShowChessman) {\n            setupBoard.iconChessmanA = dataChessmans[0];\n            setupBoard.iconChessmanB = dataChessmans[1];\n            this.setState({\n                checkShowChessman: true,\n                setupBoard: setupBoard\n            });\n        }\n        if (chessmanWin && dataBoardTrainingWithYourself) {\n            this.props.saveDataBoardTrainingWithYourself(null);\n        }\n\n    }\n\n    getDataBoardCurrent(dataBoard) {\n        this.props.saveDataBoardTrainingWithYourself(dataBoard);\n    }\n\n    checkWinChessman(chessmanWin) {\n        this.props.saveDataBoardTrainingWithYourself(null);\n        this.setState({\n            chessmanWin: chessmanWin\n        })\n    }\n\n    handleDisagree() {\n        this.props.saveDataBoardTrainingWithYourself(null);\n        this.createNewChessBoard();\n    }\n\n    handleAgree() {\n        const {\n            setupBoard\n        } = this.state;\n        const {\n            dataBoardTrainingWithYourself\n        } = this.props;\n        setupBoard.iconChessmanA =dataBoardTrainingWithYourself.iconChessmanA;\n        setupBoard.iconChessmanB =dataBoardTrainingWithYourself.iconChessmanB;\n        setupBoard.sizeChessBoard =dataBoardTrainingWithYourself.sizeChessBoard;\n        setupBoard.firstTurn =dataBoardTrainingWithYourself.firstTurn;\n\n        this.setState({\n            openDialog: false,\n            showBoard: true,\n            dataBoardTrainingWithYourself: dataBoardTrainingWithYourself,\n            setupBoard: setupBoard\n        });\n    }\n\n    handleSetupBoardChange(name, value) {\n        const {\n            setupBoard\n        } = this.state;\n        if (name === 'iconChessmanA') {\n            if (setupBoard.iconChessmanB && value.chessmanId === setupBoard.iconChessmanB.chessmanId) {\n                setupBoard.iconChessmanB = null;\n            }\n        } else if (name === 'iconChessmanB') {\n            if (setupBoard.iconChessmanA && value.chessmanId === setupBoard.iconChessmanA.chessmanId) {\n                setupBoard.iconChessmanA = null;\n            }\n        } else if (name === 'sizeChessBoard') {\n            if (value < 10 || value > 20) {\n                value = setupBoard.sizeChessBoard\n            }\n        }\n\n        this.setState({\n            setupBoard: {\n                ...setupBoard,\n                [name]: value\n            },\n            menuSelectChessmanAIcon: null,\n            menuSelectChessmanBIcon: null\n        })\n    }\n\n    setupBoard() {\n        const {\n            setupBoard\n        } = this.state;\n        if (setupBoard.sizeChessBoard && setupBoard.sizeChessBoard >= 10 && setupBoard.iconChessmanA && setupBoard.iconChessmanB) {\n            this.setState({\n                showBoard: true\n            });\n        }\n    }\n\n    createNewChessBoard() {\n        this.setState({\n            showBoard: false,\n            setupBoardCheck: true,\n            chessmanWin: null,\n            setupBoard: {\n                sizeChessBoard: 10,\n                iconChessmanA: null,\n                iconChessmanB: null,\n                firstTurn: CHESSMAN_YOURSELF_A,\n            },\n            checkShowChessman: false,\n            setupChessmanDone: false,\n            openDialog: false,\n            dataBoardTrainingWithYourself: null\n        });\n    }\n\n\n    render() {\n        const {\n            openDialog,\n            showBoard,\n            dataBoardTrainingWithYourself,\n            chessmanWin,\n            setupBoard,\n            setupBoardCheck,\n            menuSelectChessmanAIcon,\n            menuSelectChessmanBIcon,\n            checkShowChessman,\n        } = this.state;\n        const {\n            classes,\n            dataUserAuth,\n            dataChessmans\n        } = this.props;\n        return (\n            <React.Fragment>\n                <Header />\n                <Content>\n                    <div className={classes.trainingWithYourselfWrapper}>\n                        <div className={classes.trainingHeader}>\n                            {i18n.t('trainingWithYourself.header')}\n                        </div>\n                        {setupBoardCheck && !showBoard && <div className={classes.setupBoardWrapper}>\n                            <AppInput\n                                className={classes.sizeInput}\n                                type=\"number\"\n                                name=\"sizeChessBoard\"\n                                value={setupBoard.sizeChessBoard}\n                                onChange={(event) => this.handleSetupBoardChange('sizeChessBoard', event.target.value)}\n                                inputProps={{\n                                    min: 10,\n                                    max: 20\n                                }}\n                            />\n                            <div className={classes.selectChessman}>\n                                <span className=\"title\">{i18n.t('trainingWithYourself.setupBoard.selectChessmanA.title')}</span>\n                                { checkShowChessman && <Button aria-controls=\"simple-menu\" className={classes.btnChessman}  aria-haspopup=\"true\" onClick={this.openMenuSelectChessmanAIcon}>\n                                    {setupBoard && setupBoard.iconChessmanA ?\n                                    <div className={classes.iconChessman}>\n                                        <img src={setupBoard.iconChessmanA.chessmanUrl} alt=\"\" style={{width: 50, height: 50}}/>\n                                        <span>{setupBoard.iconChessmanA.name}</span>\n                                    </div> :\n                                        <div className={classes.notChessman}>\n                                            {i18n.t('trainingWithYourself.setupBoard.selectChessmanA.title')}\n                                       </div>\n                                    }\n                                </Button>}\n                                {menuSelectChessmanAIcon && <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={menuSelectChessmanAIcon}\n                                    keepMounted\n                                    open={true}\n                                    onClose={this.closeMenuSelectChessmanAIcon}\n                                >\n                                    {\n                                        dataChessmans.map((item, index) => {\n                                            return (<MenuItem onClick={() => this.handleSetupBoardChange('iconChessmanA', item)}>\n                                                <img src={item.chessmanUrl} alt=\"\" style={{width: 48, height: 48,}}/>\n                                                <span>{item.name}</span>\n                                            </MenuItem>);\n                                        })\n                                    }\n                                </Menu>}\n                            </div>\n                            <div className={classes.selectChessman}>\n                                <span className=\"title\">{i18n.t('trainingWithYourself.setupBoard.selectChessmanB.title')}</span>\n                                { checkShowChessman && <Button aria-controls=\"simple-menu\" className={classes.btnChessman} aria-haspopup=\"true\" onClick={this.openMenuSelectChessmanBIcon}>\n                                    {setupBoard && setupBoard.iconChessmanB ?\n                                    <div className={classes.iconChessman}>\n                                        <img src={setupBoard.iconChessmanB.chessmanUrl} alt=\"\" style={{width: 50, height: 50}}/>\n                                        <span>{setupBoard.iconChessmanB.name}</span>\n                                    </div> :\n                                        <div className={classes.notChessman}>\n                                            {i18n.t('trainingWithYourself.setupBoard.selectChessmanB.title')}\n                                        </div>\n                                    }\n                                </Button>}\n                                {menuSelectChessmanBIcon && <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={menuSelectChessmanBIcon}\n                                    keepMounted\n                                    open={true}\n                                    onClose={this.closeMenuSelectChessmanBIcon}\n                                >\n                                    {\n                                        dataChessmans.map((item, index) => {\n                                            return (<MenuItem onClick={() => this.handleSetupBoardChange('iconChessmanB', item)}>\n                                                <img src={item.chessmanUrl} alt=\"\" style={{width: 50, height: 50}}/>\n                                                <span>{item.name}</span>\n                                            </MenuItem>);\n                                        })\n                                    }\n                                </Menu>}\n                            </div>\n                            <Button\n                                className={classes.btnSetupBoard}\n                                onClick={this.setupBoard}\n                            >\n                                {i18n.t('trainingWithYourself.setupBoard.btnSubmit')}\n                            </Button>\n                        </div>}\n                        {showBoard && <Board\n                            size={setupBoard.sizeChessBoard}\n                            chessmanA={CHESSMAN_YOURSELF_A}\n                            chessmanB={CHESSMAN_YOURSELF_B}\n                            firstTurn={setupBoard.firstTurn}\n                            chessmanUserId={dataUserAuth ? dataUserAuth.uid : null}\n                            iconChessmanA={setupBoard.iconChessmanA}\n                            iconChessmanB={setupBoard.iconChessmanB}\n                            getDataBoardCurrent={this.getDataBoardCurrent}\n                            dataBoardTrainingDefault={dataBoardTrainingWithYourself}\n                            checkWinChessman={this.checkWinChessman}\n                        />}\n                    </div>\n                </Content>\n                <Footer />\n                <DialogForm\n                    dialogProps={{\n                        open: openDialog\n                    }}\n                    messageProps={{\n                        content: i18n.t('trainingWithYourself.dialog.content_continue'),\n                        color: ''\n                    }}\n                    disagreeButtonProps={{\n                        handleDisagree: this.handleDisagree,\n                        background: '',\n                        content: i18n.t('trainingWithYourself.dialog.no'),\n                    }}\n                    agreeButtonProps={{\n                        handleAgree: this.handleAgree,\n                        background: '',\n                        content: i18n.t('trainingWithYourself.dialog.yes'),\n                    }}\n                />\n                <Dialog className={classes.dialogNotice} PaperProps={{\n                    style: {\n                        backgroundColor: 'transparent',\n                        boxShadow: 'none',\n                    },\n                }} fullScreen open={chessmanWin && setupBoard} TransitionComponent={Transition}>\n                    <div className={classes.winNoticeWrapper}>\n                        <img src={NoiceWinIcon} alt=\"\"/>\n                        {setupBoard && setupBoard.iconChessmanA && setupBoard.iconChessmanB && <div className={classes.noticeWin}>\n                            {\n                                chessmanWin === CHESSMAN_YOURSELF_A\n                                    ?\n                                    <React.Fragment>\n                                        <img src={setupBoard.iconChessmanA.chessmanUrl} alt=\"\"/>\n                                        <span className=\"text\">{i18n.t('trainingWithYourself.setupBoard.noticeWin.chessmanA')}</span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <img src={setupBoard.iconChessmanB.chessmanUrl} alt=\"\"/>\n                                        <span className=\"text\">{i18n.t('trainingWithYourself.setupBoard.noticeWin.chessmanB')}</span>\n                                    </React.Fragment>\n                            }\n                        </div>}\n                        <Button\n                            className={classes.btnNewChessBoard}\n                            onClick={this.createNewChessBoard}\n                        >\n                            {i18n.t('trainingWithYourself.setupBoard.noticeWin.newChessBoard')}\n                        </Button>\n                    </div>\n                </Dialog>\n            </React.Fragment>\n        );\n    }\n}\n\nTrainingWithYourself.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = state => ({\n    dataUserAuth: state.authReducer.dataUserAuth,\n    dataChessmans: state.gameReducer.dataChessmans,\n    dataBoardTrainingWithYourself: state.gameReducer.dataBoardTrainingWithYourself\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        saveDataBoardTrainingWithYourself: (dataTraining) => dispatch(gameActions.saveDataBoardTrainingWithYourself(dataTraining)),\n        showDataChessmans: () => dispatch(gameActions.showDataChessmans()),\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withStyles(styles),\n    withTranslation(),\n) (TrainingWithYourself);\n"],"sourceRoot":""}